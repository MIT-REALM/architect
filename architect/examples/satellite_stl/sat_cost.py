import jax.numpy as jnp

import architect.components.specifications.stl as stl

from .sat_simulator import sat_simulate


def sat_cost(
    design_params: jnp.ndarray,
    exogenous_sample: jnp.ndarray,
    specification: stl.STLFormula,
    specification_weight: float,
    time_steps: int,
    dt: float,
    substeps: int,
) -> jnp.ndarray:
    """Compute the cost based on given beacon locations.

    args:
        design_params: a (6 * 3 + time_steps * (3 + 6)) array of design parameters.
            The first 6 * 3 values define a gain matrix for state-feedback control
            u = -K(x - x_planned). Each later group of 3 + 6 values is a control input
            and target state at that timestep, defining a trajectory.
        exogenous_sample: (6,) array containing initial states.
                          Can be generated by SatExogenousParameters.sample
        specification: jit-wrapped STL formula specifying the planning problem
        specification_weight: how much to weight the STL robustness in the cost
        time_steps: the number of steps to simulate
        dt: the duration of each time step
        substeps: how many smaller updates to break this interval into
    returns:
        scalar cost
    """
    # Get the state trace and control effort from simulating
    print("Simulation started...", end="")
    state_trace, total_effort = sat_simulate(
        design_params,
        exogenous_sample,
        time_steps,
        dt,
        substeps,
    )
    print("Done")

    # Get the robustness of the formula on this state trace
    t = jnp.linspace(0.0, time_steps * dt, state_trace.shape[0]).reshape(1, -1)
    signal = jnp.vstack((t, state_trace.T))
    print("Computing robustness...", end="")
    robustness = specification(signal)[1, 0]
    print("Done")

    # Compute cost based on combination of STL formula robustness and control effort
    cost = -robustness + total_effort / specification_weight
    return cost
